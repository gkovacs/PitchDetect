// Generated by CoffeeScript 1.6.3
var CENTER, HEIGHT, MINVAL, WIDTH, analyser, audioContext, autoCorrelate, buf, buflen, canvasContext, centsOffFromPitch, confidence, currentPitch, detectorElem, detuneAmount, detuneElem, error, frequencyFromNoteNumber, getUserMedia, gotStream, isPlaying, noteAge, noteElem, noteFromPitch, noteStrings, pitchAnalyser, pitchElem, prevNote, rafID, sourceNode, theBuffer, toggleLiveInput, toggleLiveInput2, togglePlayback, tracks, updatePitch;

audioContext = new AudioContext();

isPlaying = false;

sourceNode = null;

analyser = null;

theBuffer = null;

detectorElem = void 0;

canvasContext = void 0;

pitchElem = void 0;

noteElem = void 0;

detuneElem = void 0;

detuneAmount = void 0;

WIDTH = 300;

CENTER = 150;

HEIGHT = 42;

confidence = 0;

currentPitch = 0;

window.onload = function() {
  var request;
  request = new XMLHttpRequest();
  request.open("GET", "../sounds/whistling3.ogg", true);
  request.responseType = "arraybuffer";
  request.onload = function() {
    audioContext.decodeAudioData(request.response, function(buffer) {
      theBuffer = buffer;
    });
  };
  request.send();
  detectorElem = document.getElementById("detector");
  pitchElem = document.getElementById("pitch");
  noteElem = document.getElementById("note");
  detuneElem = document.getElementById("detune");
  detuneAmount = document.getElementById("detune_amt");
  canvasContext = document.getElementById("output").getContext("2d");
  detectorElem.ondragenter = function() {
    this.classList.add("droptarget");
    return false;
  };
  detectorElem.ondragleave = function() {
    this.classList.remove("droptarget");
    return false;
  };
  detectorElem.ondrop = function(e) {
    var reader;
    this.classList.remove("droptarget");
    e.preventDefault();
    theBuffer = null;
    reader = new FileReader();
    reader.onload = function(event) {
      audioContext.decodeAudioData(event.target.result, (function(buffer) {
        theBuffer = buffer;
      }), function() {
        alert("error loading!");
      });
    };
    reader.onerror = function(event) {
      alert("Error: " + reader.error);
    };
    reader.readAsArrayBuffer(e.dataTransfer.files[0]);
    return false;
  };
};

error = function() {
  alert("Stream generation failed.");
};

getUserMedia = function(dictionary, callback) {
  var e;
  try {
    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    navigator.getUserMedia(dictionary, callback, error);
  } catch (_error) {
    e = _error;
    alert("getUserMedia threw exception :" + e);
  }
};

gotStream = function(stream) {
  var mediaStreamSource;
  mediaStreamSource = audioContext.createMediaStreamSource(stream);
  analyser = audioContext.createAnalyser();
  analyser.fftSize = 2048;
  mediaStreamSource.connect(analyser);
  updatePitch();
};

toggleLiveInput = function() {
  getUserMedia({
    audio: true
  }, gotStream);
};

toggleLiveInput2 = function() {
  getUserMedia({
    audio: true
  }, gotStream2);
};

togglePlayback = function() {
  var isLiveInput, now;
  now = audioContext.currentTime;
  if (isPlaying) {
    sourceNode.stop(now);
    sourceNode = null;
    analyser = null;
    isPlaying = false;
    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = window.webkitCancelAnimationFrame;
    }
    window.cancelAnimationFrame(rafID);
    return "start";
  }
  sourceNode = audioContext.createBufferSource();
  sourceNode.buffer = theBuffer;
  sourceNode.loop = true;
  analyser = audioContext.createAnalyser();
  analyser.fftSize = 2048;
  sourceNode.connect(analyser);
  analyser.connect(audioContext.destination);
  sourceNode.start(now);
  isPlaying = true;
  isLiveInput = false;
  updatePitch();
  return "stop";
};

rafID = null;

tracks = null;

buflen = 2048;

buf = new Uint8Array(buflen);

MINVAL = 134;

noteStrings = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

noteFromPitch = function(frequency) {
  var noteNum;
  noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));
  return Math.round(noteNum) + 69;
};

frequencyFromNoteNumber = function(note) {
  return 440 * Math.pow(2, (note - 69) / 12);
};

centsOffFromPitch = function(frequency, note) {
  return 1200 * Math.log(frequency / frequencyFromNoteNumber(note)) / Math.log(2);
};

autoCorrelate = function(buf, sampleRate) {
  var MAX_SAMPLES, MIN_SAMPLES, SIZE, best_correlation, best_offset, correlation, i, offset, rms, val;
  MIN_SAMPLES = 4;
  MAX_SAMPLES = 1000;
  SIZE = 1000;
  best_offset = -1;
  best_correlation = 0;
  rms = 0;
  confidence = 0;
  currentPitch = 0;
  if (buf.length < (SIZE + MAX_SAMPLES - MIN_SAMPLES)) {
    return;
  }
  i = 0;
  while (i < SIZE) {
    val = (buf[i] - 128) / 128;
    rms += val * val;
    i++;
  }
  rms = Math.sqrt(rms / SIZE);
  offset = MIN_SAMPLES;
  while (offset <= MAX_SAMPLES) {
    correlation = 0;
    i = 0;
    while (i < SIZE) {
      correlation += Math.abs(((buf[i] - 128) / 128) - ((buf[i + offset] - 128) / 128));
      i++;
    }
    correlation = 1 - (correlation / SIZE);
    if (correlation > best_correlation) {
      best_correlation = correlation;
      best_offset = offset;
    }
    offset++;
  }
  if ((rms > 0.01) && (best_correlation > 0.01)) {
    confidence = best_correlation * rms * 10000;
    currentPitch = sampleRate / best_offset;
  }
};

pitchAnalyser = new PitchAnalyzer(2048);

noteAge = 0;

prevNote = 0;

updatePitch = function(time) {
  var cycles, detune, note, tone;
  cycles = new Array;
  analyser.getByteTimeDomainData(buf);
  pitchAnalyser.input(buf);
  pitchAnalyser.process();
  tone = pitchAnalyser.findTone();
  if ((tone != null) && tone.stabledb > -20) {
    note = noteFromPitch(tone.freq);
    if (Math.abs(note - prevNote) < 1) {
      noteAge += 1;
    } else {
      noteAge = 0;
    }
    prevNote = note;
    if (noteAge > 2) {
      $('#currentPitch').html(noteStrings[note % 12] + '<br>' + note + '<br>' + tone.freq + '<br>' + tone.stabledb + '<br>' + tone.age);
    }
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window.webkitRequestAnimationFrame;
  }
  rafID = window.requestAnimationFrame(updatePitch);
  return;
  autoCorrelate(buf, audioContext.sampleRate);
  canvasContext.clearRect(0, 0, WIDTH, HEIGHT);
  if (confidence < 10) {
    detectorElem.className = "vague";
    pitchElem.innerText = "--";
    noteElem.innerText = "-";
    detuneElem.className = "";
    detuneAmount.innerText = "--";
  } else {
    detectorElem.className = "confident";
    pitchElem.innerText = Math.floor(currentPitch);
    note = noteFromPitch(currentPitch);
    noteElem.innerHTML = noteStrings[note % 12];
    detune = centsOffFromPitch(currentPitch, note);
    if (detune === 0) {
      detuneElem.className = "";
      detuneAmount.innerHTML = "--";
    } else {
      if (Math.abs(detune) < 10) {
        canvasContext.fillStyle = "green";
      } else {
        canvasContext.fillStyle = "red";
      }
      if (detune < 0) {
        detuneElem.className = "flat";
      } else {
        detuneElem.className = "sharp";
      }
      canvasContext.fillRect(CENTER, 0, detune * 3, HEIGHT);
      detuneAmount.innerHTML = Math.abs(Math.floor(detune));
    }
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = window.webkitRequestAnimationFrame;
  }
  rafID = window.requestAnimationFrame(updatePitch);
};

$(document).keydown(function(evt) {});
